Más tipos: structs, slices y maps.
Aprende a definir tipos en base a otros existentes: esta lección cubre los structs, arrays, slices y maps.

The Go Authors
https://golang.org

Traducido y ampliado por Carlos González <carlos.gonzalez@kairosds.com>

* Punteros

Go tiene punteros.
Un puntero almacena la dirección de memoria de un valor.

El tipo `*T` es un puntero a un valor de tipo `T`. Su valor cero es `nil`.

	var p *int

El operador `&` genera un puntero a su operando.

	i := 42
	p = &i

El operador `*` indica el valor al que está apuntando el puntero.

	fmt.Println(*p) // lee i a través del puntero p
	*p = 21         // fijar el valor de i a través del puntero p

Esto se conoce como "desreferencia" or "indirección".

Al contrario de C, Go no tiene aritmética de punteros.

.play moretypes/pointers.go

* Structs

Un `struct` es una colección de campos.

.play moretypes/structs.go

* Campos del struct

Se accede a los campos del struct a través de un punto.

.play moretypes/struct-fields.go

* Punteros a structs

Se puede acceder a los campos del struct a través de un puntero de struct.

Para acceder al campo `X` del struct cuando tenemos el puntero `p` apuntando al struct podríamos escribir `(*p).X`.
Sin embargo, esta notación es aparatosa, así que el lenguaje nos permite escribir en su lugar simplemente `p.X`, sin la desreferencia explícita.

.play moretypes/struct-pointers.go

* Expresiones literales de struct

Un literal de struct indica el valor de un struct recién asignado al enumerar los valores de sus campos.

Puedes enumerar sólo un subconjunto de campos usando la sintaxis `Nombre:`. (El orden de los campos nombrados es no importa.)

El prefijo especial `&` devuelve un puntero al valor del struct.

.play moretypes/struct-literals.go


* Arrays

El tipo `[n]T` es un array de `n` valores de tipo `T`.

La expresión

	var a [10]int

declara la variable `a` como un array de 10 enteros.

La longitud de un array es parte de su tipo, por lo que los arrays no pueden cambiar de tamaño.
Esto puede parecer una limitación, pero no te preocupes;
Go proporciona una manera conveniente para trabajar con arrays.

.play moretypes/array.go


* Slices

Un array tiene un tamaño fijo.
Un slice, por otro lado, es una vista con tamaño dinámico y flexible de los
elementos de un array.
En la práctica, los slices son mucho más comunes que los arrays.

El tipo `[]T` es un slice con elementos de tipo `T`.

Un slice se forma especificando dos índices, un límite inferior y otro superior, separados por dos puntos:

	a[inf : sup]

Esto selecciona un intervalo semi-abierto que incluye el primer elemento, pero excluye el último.

La siguiente expresión crea un slice que incluye del primer al tercer elemento de `a`:

	a[1:4]

.play moretypes/slices.go


* Slices son como referencias a arrays

Un slice no almacena ningún dato,
sólo describe la sección de un array subyacente.

Cambiar los elementos de un slice modifica los
elementos correspondientes de su array subyacente.

Otros slices que compartan el mismo array subyacente verán esos mismos cambios.

.play moretypes/slices-pointers.go


* Literales de slice

Un literal de slice es como el literal del array pero sin la longitud.

Esto es un literal de array:

	[3]bool{true, true, false}

Y este creat el mismo array que arriba,
y luego construye un slice que lo referencia:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Valores por defecto de slice

Cuando se utilizan slices, puedes omitor uno de los límites superior o inferior para utilizar los valores por defecto en su lugar.

El valor por defecto para el límite inferior es cero; para el límite superior es la longitud del slice.

Para el array

	var a [10]int

las siguientes expresiones de slices son equivalentes:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Longitud y capacidad del slice

Un slice tiene sendas _longitud_ y _capacidad_.

La longitud de un slice es el número de elementos que contiene.

La capacidad de un slice es el número de elementos del array subyacente,
contando desde el primer elemento del slice.

La longitud y capacidad del slice `s` se pueden obtener utilizando las expresiones
`len(s)` y `cap(s)` respectivamente.

Puedes extender la longitud de un slice siempre que tenga suficiente capacidad.
Intenta cambiar una de las operaciones sobre el slice en el programa de ejemplo para extenderlo
más allá de su capacidad y observa lo que ocurre.

.play moretypes/slice-len-cap.go


* Slices nulos

El valor cero de un slice es `nil`.

Un slice nulo tiene una longitud y capacidad igual a 0 y no tiene un array subyacente.

.play moretypes/nil-slices.go


* Creando un slice con make

Se pueden crear slices con la función incorporada `make`;
así es como se crean arrays de tamaño dinámico.

La función `make` asigna un array lleno de "ceros"
y devuelve un slice que hace referencia a dicho array:

	a := make([]int, 5)  // len(a)=5

Para especificar una capacidad, pasa un tercer argumento a `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices de slices

Los slices pueden contener cualquier tipo, incluyendo otros slices.

.play moretypes/slices-of-slice.go


* Anexar a un slice

Es común anexar nuevos elementos a un slice, y por ello Go proporciona una función incorporada llamada `append`. La [[https://golang.org/pkg/builtin/#append][documentación (en inglés)]]
del paquete incorporado describe la función `append`.

	func append(s []T, vs ...T) []T

El primer parámetro `s` de `append` es un slice de tipo `T`, y el resto son valores de tipo
`T` para añadir al slice.

El valor que resulta de `append` es un slice que contiene todos los elementos del slice
original más los valores proporcionados.

Si el array subyacente de `s` es demasiado pequeño para almacenar todos los valores dados, se asignará un array
de mayor tamaño. El slice que devuelva apuntará a ese array asignado recientemente.

(Para aprender más sobre slices, lee el artículo en inglés [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]].)

.play moretypes/append.go


* Rangos

La forma `range` del bucle `for` permite itrear sobre un slice o un mapa.

A la horar de recorrer un slice a través de su rango, en cada iteración se devuelven dos valores.
El primero es el índice, y el segundo es una copia del elemento en dicho índice.

.play moretypes/range.go

* Rangos (cont.)

Puedes omitir el índice o el valor asignándolos a `_`.

    for i, _ := range potencias
    for _, value := range potencias

Si sólo necesitas el índice, puedes omitir la segunda variable.

    for i := range potencias

.play moretypes/range-continued.go

* Ejercicio: Slices

Implementa `Pic`. Debería devolver un slice de longitud `dy`, en el que cada elemento es un slice de `dx` enteros sin signo de 8 bits. Cuando ejecutes el programa, mostrará tu imagen, interpretando los valores enteros en escala de grises (bueno, en escala de azules).

La elección de la imagen queda a tu gusto. Aquí tienes algunas funciones interesantes: `(x+y)/2`, `x*y`, y `x^y`.

(Necesitarás utilzar un bucle para asignar cada `[]uint8` dentro del `[][]uint8`.)

(Usa `uint8(valorEntero)` para convertir entre tipos.)

.play moretypes/exercise-slices.go

* Mapas

Un map asocia claves con valores.

El valor cero de un map es `nil`.
Un mapa `nil` ni tiene claves, ni se pueden añadir.

La función `make` devuelve un map del tipo dado,
inicializado y listo para usarse.

.play moretypes/maps.go

* Literales de mapa

Los literales de un map son como los literales de un struct, pero las claves son obligatorias.

.play moretypes/map-literals.go

* Literales de mapa (cont.)

Si el tipo del nivel superior es sólo el nombre de un tipo, lo puedes omitir de los elementos del literal.

.play moretypes/map-literals-continued.go

* Mutando los mapas

Insertar o modificar un elemento en el map `m`:

	m[clave] = elemento

Obtener un elemento:

	elemento = m[clave]

Eliminar un elemento:

	delete(m, clave)

Comprobar que una clave existe con una asignación de dos valores:

	elemento, ok = m[clave]

Si la `clave` se encuentra en `m`, `ok` es `true`. Si no, `ok` es `false`.

Si la `clave` no se encuentra en el map, entonces `elemento` es el valor cero para el tipo del elemento del map.

*Nota:* Si `elemento` u `ok` no se han declarado todavía puedes usar la forma corta de declaración:

	elemento, ok := m[clave]

.play moretypes/mutating-maps.go

* Ejercicio: Mapas

Implementa `ContarPalabras`. Debería devolver un mapa con la cuenta de cada "palabra" de la cadena `s`. La función `wc.Test` ejecuta una suite de test sobre la función proporcionada e imprime el resultado del éxito o fracaso.

Puede que encuentres útil la documentación de [[https://golang.org/pkg/strings/#Fields][strings.Fields]] (en inglés).

.play moretypes/exercise-maps.go

* Valores de función

Las funciones también son valores. Se pueden usar como cualquier otro valor.

Los valores de función se pueden usar como argumentos de una función y valores de retorno.

.play moretypes/function-values.go

* Clausuras de función

Las funciones de Go pueden ser clausuras. Una clausura es el valor de una función que hace referencia a variables que se encuentran fuera del cuerpo de dicha función. La función puede acceder y asignar valores a las variables referenciadas; en este sentido la función está "enlazada" a las variables.

Por ejemplo, la función `sumador` devuelve una clausura. Cada clausura está enlazada a su propia variable `suma`.

.play moretypes/function-closures.go

* Ejercicio: clausura de Fibonacci

Vamos a divertirnos con las funciones.

Implementa una función de `fibonacci` que devuelva una función (una clausura) que
devuelva los sucesivos [[https://es.wikipedia.org/wiki/Sucesi%C3%B3n_de_Fibonacci][números de Fibonacci]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* ¡Enhorabuena!

¡Terminaste esta lección!

Si quieres, puedes volver a la lista de [[/list][módulos]] para ver qué es lo próximo que quieres aprender, o continuar con la [[javascript:click('.next-page')][siguiente lección]].
