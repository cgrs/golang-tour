Métodos e interfaces
Esta lección abarca los métodos y las interfaces, aquellos constructos que definen los objetos y su comportamiento.

The Go Authors
https://golang.org

Traducido y ampliado por Carlos González <carlos.gonzalez@kairosds.com>

* Métodos

Go no tiene clases como en Java o C++.
Sin embargo, puedes definir métodos sobre los tipos.

Un método es una función con un argumento _receptor_ especial.

El receptor aparece en su propia lista de argumentos entre la palabra clave `func` y
el nombre del método.

En este ejemplo, el método `Abs` tiene un receptor de tipo `Vértice` llamado `v`.

.play methods/methods.go

* Los métodos son funciones

Recuerda: un método simplemente es una función con un argumento receptor.

Aquí está escrita la función `Abs` como una función corriente sin cambios en su funcionamiento.

.play methods/methods-funcs.go

* Métodos (cont.)

También puedes declarar un método en tipos que no sean structs.

En este ejemplo se puede ver un tipo numérico `MiFlotante` con un método `Abs`.

Sólo se puede declarar un método con un receptor cuyo tipo esté declarado en el mismo
paquete que el método.
No puedes declarar un método con un receptor cuyo tipo esté definido en otro
paquete (lo que incluye los tipos incorporados, como `int`).

.play methods/methods-continued.go

* Punteros de receptores

Puedes declarar métodos con punteros de receptores.

Esto significa que el tipo del receptor tiene la sintaxis literal `*T` para cierto tipo `T`.
(Además, `T` no puede ser un puntero del tipo `*int`.)

Por ejemplo, el método `Escalar` está definido aquí sobre `*Vertex`.

Los métodos con punteros de receptores pueden modificar el valor al que apunta el receptor
(tal y como hace aquí `Escalar`).
Dado que los métodos a menudo necesitan modificar su receptor, los punteros de receptores son
más comunes que los receptores como valor.

Prueba a quitar el `*` de la declaración de la función `Escalar` en la línea 16
y observa cómo cambia el comportamiento del programa.

Con un receptor como valor, el método `Escalar` opera sobre una copia del valor original de `Vértice`.
(Este comportamiento es el mismo para cualquier otro argumento de la función.)
El método `Escalar` debe tener un puntero de receptor para poder cambiar el valor de `Vértice`
declarado en la función `main`.

.play methods/methods-pointers.go

* Punteros y funciones

Aquí podemos ver los métodos `Abs` y `Escalar` reescritos como funciones.

De nuevo, intenta quitar el `*` de la línea 16.
¿Eres capaz de ver por qué cambia el comportamiento?
¿Qué más tuviste que cambiar para que el ejemplo compilara?

(Si no lo sabes con seguridad, continúa a la página siguiente.)

.play methods/methods-pointers-explained.go

* Métodos e indirección de punteros

Al comparar los dos programas anteriores, habrás podido observar que
las funciones con un puntero como argumento deben tomar un puntero:

	var v Vértice
	FuncEscalar(v, 5)  // ¡Error de compilación!
	FuncEscalar(&v, 5) // OK

mientras que los métodos con punteros de receptores toman tanto un valor como un puntero
como receptor cuando se llaman:

	var v Vértice
	v.Escalar(5)  // OK
	p := &v
	p.Escalar(10) // OK

Para la instrucción `v.Escalar(5)`, aunque `v` sea un valor y no un puntero,
el método con el puntero de receptor se llama de manera automática.
Así, como conveniencia, Go interpreta la instrucción `v.Escalar(5)` como
`(&v).Escalar(5)` dado que el método `Escalar` tiene un puntero de receptor.

.play methods/indirection.go

* Métodos e indirección de punteros (2)

Ocurre una cosa equivalente en la dirección contraria.

Las funciones que toman un argumento como valor deben tomar un valor de ese tipo en específico:

	var v Vértice
	fmt.Println(FuncAbs(v))  // OK
	fmt.Println(FuncAbs(&v)) // ¡Error de compilación!

mientras que los métodos con receptores como valor pueden tomar tanto un valor o un puntero
como receptor cuando se les llama:

	var v Vértice
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

En este caso, la llamada al método `p.Abs()` se interpreta como `(*p).Abs()`.

.play methods/indirection-values.go

* Escogiendo entre un receptor como valor o puntero

Hay dos razones para usar un puntero de receptor.

La primera es para que el método pueda modificar el valor al cual apunta su receptor.

La segunda es para evitar copiar el valor en cada llamada al método.
Esto puede ser más eficiente si el receptor es un struct grande, por ejemplo.

En este ejemplo, ambos métodos `Escalar` y `Abs` tienen un receptor de tipo `*Vértice`,
aunque el método `Abs` no necesite modificar su receptor.

En general, todos los métodos de un tipo dado deberían tener receptores como valor o como puntero,
pero no una mezcla de ambos.
(Veremos por qué en las páginas siguientes.)

.play methods/methods-with-pointer-receivers.go

* Interfaces

Un tipo _interface_ se define como un conjunto de signaturas de métodos.

Un valor de tipo interface puede tomar cualquier valor que implemente dichos métodos.

*Nota:* Hay un error en el código de ejemplo en la línea 22.
`Vértice` (el tipo como valor) no implementa `Abser` porque
el método `Abs` está definido solamente en `*Vértice` (el tipo como puntero).

.play methods/interfaces.go

* Las interfaces se implementan de manera implícita

Un tipo implementa una interfaz al implementar sus métodos.
No hay ninguna declaración explícita de dicha intención, nada de palabras clave "implements".

Las interfaces implícitas desacoplan la definicion de un interfaz de su
implementación, la cual podría aparecer en cualquier paquete sin acuerdos previos.

.play methods/interfaces-are-satisfied-implicitly.go

* Valores de interfaz

Por debajo, los valores de las interfaces pueden considerarse como una tupla de un valor y un
tipo concreto:

	(valor, tipo)

El valor de una interfaz almacena el valor de un tipo específico subyacente.

Al llamar a un método sobre el valor de una interfaz, hace que se ejecute el método con el mismo nombre en
su tipo subyacente.

.play methods/interface-values.go

* Valores de una interfaz con valores nulos subyacentes

Si el valor concreto dentro de una interfaz es nulo en sí mismo,
el método se llamará con un receptor nulo.

En algunos lenguajes esto podría desencadenar una excepción de puntero nulo,
pero en Go es habitual escribir métodos que gestionan con elegancia una llamada
con un receptor nulo (como con el método `M` en este ejemplo.)

Observa que el valor de una interfaz que alberga un valor nulo específico es en sí mismo no nulo.

.play methods/interface-values-with-nil.go

* Valores nulos de interfaz

Un valor nulo de interfaz no almacena nigún valor ni su tipo concreto.

Al llamar a ún método en una interfaz nula provoca un error en tiempo de ejecución ya que no hay
ningún tipo dentro de la tupla de la interfaz para indicar el método concreto al que llamar.

.play methods/nil-interface-values.go

* La interfaz vacía

El tipo de interfaz que especifica cero métodos se conoce como la _interfaz_vacía_:

	interface{}

Una interfaz vacía puede almacenar valores de cualquier tipo.
(Todos los tipos tienen al menos cero métodos.)

Las interfaces vacías se usan en código que gestiona valores de tipo desconocido.
Por ejemplo, `fmt.Print` admite un número cualquiera de argumentos de tipo `interface{}`.

.play methods/empty-interface.go

* Confirmaciones de tipos

Una _confirmación_de_tipo_ proporciona acceso al valor subyacente concreto de una interfaz.

	t := i.(T)

Este enunciado estipula que el valor de la interfaz `i` alberga el tipo concreto `T`
y asigna el valor subyacente de `T` a la variable `t`.

Si `i` no tiene un tipo `T`, la instrucción desembocará en una excepción de pánico.

Para _comprobar_ si el valor de una interfaz alberga un tipo específico,
la confirmación de tipo puede devolver dos valores: el valor subyacente
y un valor booleano que indica si dicha confirmación tuvo éxito.

	t, ok := i.(T)

Si `i` contiene un tipo `T`, entonces `t` será el valor subyacente y `ok` será verdadero.

Por el contrario, `ok` será falso y `t` tendrá el valor cero del tipo `T`,
y no ocurrirá ninguna excepción de pánico.

Observa la similitud entre esta sintaxis y la utilizada a la hora de acceder al valor de un map.

.play methods/type-assertions.go

* Switches de tipo

Un _switch_de_tipo_ es una construcción que permite varias confirmaciones de tipo en serie.

Un switch de tipo es como una instrucción switch común, pero los casos en el switch de tipo
especifican tipos (no valores), y dichos valores se comparan con el
tipo del valor almacenado por la interfaz dada.

	switch v := i.(type) {
	case T:
		// aquí v tiene tipo T
	case S:
		// aquí v tiene tipo S
	default:
		// no hay coincidencias; aquí v tiene el mismo tipo que i
	}

La declaración en un switch de tipo tiene la misma sintáxis que una confirmación de tipo `i.(T)`,
pero el tipo específico `T` se reemplaza por la palabra clave `type`.

Esta instrucción switch comprueba si la interfaz `i`
alberga un valor de tipo `T` o `S`.
En cada uno de los casos `T` y `S`, la variable `v` será de tipo
`T` o `S` respectivamente y tendrá el valor guardado por `i`.
En el caso por defecto (cuando no hay coincidencias), la variable `v` es
del mismo tipo de interfaz y valor que `i`.

.play methods/type-switches.go

* Stringers

Una de las interfaces más extendidas es [[//golang.org/pkg/fmt/#Stringer][`Stringer`]], definida en el paquete [[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

Un `Stringer` es un tipo que puede describirse él mismo como una cadena. El paquete `fmt`
(y muchos otros) buscan esta interfaz para imprimir valores.

.play methods/stringer.go

* Ejercicio: Stringers

Haz que el tipo `DirecciónIP` implemente la interfaz `fmt.Stringer` para imprimir la dirección IP como una cuaterna 
separada por puntos.

Por ejemplo, `DirecciónIP{1,`2,`3,`4}` debería imprimirse como `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errores

Los programas en Go expresan estados de error con valores de tipo `error`.

El tipo `error` es una interfaz incorporada similar a `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Como con `fmt.Stringer`, el paquete `fmt` busca la interfaz `error` cuando
imprime valores.)

Las funciones a menudo devuelven un valor de tipo `error`, y el código que las llama debería gestionar esos errores
comprobando si el valor del error equivale a `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("no se puede convertir a número: %v\n", err)
		return
	}
	fmt.Println("Número convertido:", i)

Un `error` nulo indica éxito; un `error` no nulo indica fracaso.

.play methods/errors.go

* Ejercicio: Errores

Copia tu función `Raíz` de los [[/flowcontrol/8][ejercicios anteriores]] y modifícala para que devuelva un valor de tipo `error`.

`Raíz` debería devolver un error no nulo cuando se le pasa un número negativo, ya que no admite números complejos.

Crea un tipo nuevo

	type ErrorRaízNegativa float64

y conviértelo en un `error` al darle un método

	func (e ErrorRaízNegativa) Error() string

tal que `ErrorRaízNegativa(-2).Error()` devuelva `"no se pudo obtener la raíz del número negativo -2"`.

*Aviso:* Al llamar a `fmt.Sprint(e)` dentro del método `Error` mandará el programa a un bucle infinito. Esto se puede evitar convirtiéndo `e` primero: `fmt.Sprint(float64(e))`. ¿Sabrías por qué?

Cambia tu función `Raíz` para que devuelva un valor de tipo `ErrorRaízNegativa` cuando reciba un número negativo.

.play methods/exercise-errors.go

* Lectores

En el paquete `io` se especifica la interfaz `io.Reader`,
que representa el terminal de lectura de un flujo de datos.

La biblioteca estándar de Go contiene [[https://cs.opensource.google/search?q=Read%5C(%5Cw%2B%5Cs%5C%5B%5C%5Dbyte%5C)&ss=go%2Fgo][muchas implementaciones]] de esta interfaz, incluyendo archivos, conexiones de red, compresores, cifrados, y otros.

La interfaz `io.Reader` tiene un método `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` rellena el slice de bytes proporcionado con los datos y devuelve el número de bytes
rellenos y un valor de tipo error. Devuelve un error de tipo `io.EOF` cuando el flujo acaba.

Este código de ejemplo crea un lector de cadenas ([[//golang.org/pkg/strings/#Reader][`strings.Reader`]])
y consume la salida de 8 en 8 bytes.

.play methods/reader.go

* Ejercicio: Lectores

Implementa la interfaz `Reader` en un tipo que emita en un flujo infinito el carácter ASCII
`'A'`.

.play methods/exercise-reader.go

* Ejercicio: LectorRot13

Un patrón habitual es tener un [[https://golang.org/pkg/io/#Reader][io.Reader]] que envuelve otro `io.Reader`, modificando el flujo de datos de alguna manera.

Por ejemplo, la función [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] recibe un `io.Reader` (un flujo de datos comprimidos) y devuelve un `*gzip.Reader` que también implementa la interfaz `io.Reader` (un flujo de datos sin comprimir).

Implementa en el tipo `LectorRot13` la interfaz `io.Reader` que lee desde un `io.Reader`, modificando el flujo aplicando el cifrado de sustitución [[https://es.wikipedia.org/wiki/ROT13][ROT13]] a todos los caracteres alfabéticos.

El tipo `LectorRot13` ya se ha proporcionado.
Conviértelo en un `io.Reader` implementando el método `Read`.

.play methods/exercise-rot-reader.go

* Imágenes

El paquete [[https://golang.org/pkg/image/#Image][image]] define la interfaz `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Nota*: el tipo `Rectangle` del valor de retorno del método `Bounds` es de hecho del tipo
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], ya que la
declaración se encuentra dentro del paquete `image`.

(Puedes ver [[https://golang.org/pkg/image/#Image][la documentación (en inglés)]] para obtener todos los detalles.)

Los tipos `color.Color` y `color.Model` también son interfaces, pero las vamos a ignorar usando las implementaciones predefinidas de `color.RGBA` y `color.RGBAModel` respectivamente. Estas interfaces y tipos están especificados en el [[https://golang.org/pkg/image/color/][paquete image/color]]

.play methods/images.go

* Ejercicio: Imágenes

¿Recuerdas el [[/moretypes/18][generador de imágenes]] que escribiste anteriormente? Escribamos otro nuevo, pero esta vez que devuelva una implementación de la interfaz `image.Image` en lugar de un slice de datos.

Define tu propio tipo `Image`, implementa [[https://golang.org/pkg/image/#Image][los métodos necesarios]], y llama a `pic.ShowImage`.

`Bounds` debería devolver un `image.Rectangle`, como `image.Rect(0,`0,`w,`h)`.

`ColorModel` debería devolver `color.RGBAModel`.

El método `At` debería devolver un color; el valor `v` en el último generador de imágenes corresponde a `color.RGBA{v,`v,`255,`255}` en este.

.play methods/exercise-images.go

* ¡Enhorabuena!

¡Terminaste esta lección!

Si quieres, puedes volver a la lista de [[/list][módulos]] para ver qué es lo próximo que quieres aprender, o continuar con la [[javascript:click('.next-page')][siguiente lección]].
