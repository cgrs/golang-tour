Concurrencia
Go proporciona construcciones de concurrencia como parte del núcleo del lenguaje. Esta lección las presenta y muestra algunos ejemplos de su uso.

The Go Authors
https://golang.org

Traducido y ampliado por Carlos González <carlos.gonzalez@kairosds.com>

* Gorrutinas

Una _gorrutina_(goroutine)_ es un hilo ligero gestionado por el runtime de Go.

	go f(x, y, z)

inicia una gorrutina nueva que ejecuta

	f(x, y, z)

La evaluación de `f`, `x`, `y`, y `z` ocurre en la gorrutina actual y la ejecución de `f` sucede en la nueva gorrutina.

Las gorrutinas se ejecutan en el mismo espacio de direcciones, por lo que el acceso a la memoria compartida debe sincronizarse. El paquete [[https://golang.org/pkg/sync/][`sync`]] proporciona primitivas muy útiles, aunque no las necesitarás mucho en Go ya que hay otras primitivas. (Las verás en el siguiente apartado.)

.play concurrency/goroutine.go

* Canales

Los canales son un conducto tipado a través del cual puedes enviar y recibir valores con el operador de canales, `<-`.

	ch <- v    // Envía v al canal ch.
	v := <-ch  // Recibe desde ch, y
	           // asigna el valor a v.

(Los datos fluyen en la dirección de la flecha.)

Al igual que los mapas y los slices, los canales deben ser creados antes de su uso:

	ch := make(chan int)

Por defecto, los envíos y recepciones bloquean hasta que el otro lado esta listo. Esto permite que las gorrutinas se sincronicen sin bloqueos explícitos o variables de condición.

El código de ejemplo suma los números en un slice, distribuyendo el trabajo entre dos gorrutinas.
Una vez que ambas gorrutinas han terminado sus cómputos, calcula el resultado final.

.play concurrency/channels.go

* Canales con búfer

Los canales pueden tener _búfer_. Para inicializar un canal con búfer, proporciona el tamaño del búfer como segundo argumento en `make`:

	ch := make(chan int, 100)

Los envíos a un canal con búfer sólo bloquean cuando el búfer está lleno. Las recepciones bloquean cuando el búfer está vacío.

Modifica el ejemplo para rebasar el búfer y observa lo que ocurre.

.play concurrency/buffered-channels.go

* Range y Close

Un emisor puede cerrar (`close`) un canal para indicar que no se enviarán más valores. Los receptores pueden comprobar si un canal se ha cerrado asignando un segundo parámetro a la expresión de recepción: luego

	v, ok := <-ch

`ok` es `false` si no hay más valores para recibir y el canal está cerrado.

El bucle `for`i`:=`range`c` recibe valores del canal repetidamente hasta que este se cierra.

*Nota:* Sólo el emisor debería cerrar un canal, nunca el receptor. Enviar a un canal cerrado provocará una excepción de pánico.

*Otra*nota:* Los canales no son como ficheros; normalmente no necesitas cerrarlos. El cierre es sólo necesario cuando el receptor necesita saber que no hay más valores por venir, así como para terminar un bucle `range`.

.play concurrency/range-and-close.go

* Select

La instrucción `select` le permite esperar a una gorrutina en múltiples operaciones de comunicación.

Un `select` bloquea hasta que uno de sus casos puede ejecutarse, entonces ejecuta dicho caso. Si hay varios casos listos, escogerá uno de manera aleatoria.

.play concurrency/select.go

* Select por defecto

El caso `default` en un `select` se ejecuta si no está listo ningún otro caso.

Usa el caso `default` para intentar enviar o recibir sin bloquear:

	select {
	case i := <-c:
		// usa i
	default:
		// recibir desde c podría bloquear
	}

.play concurrency/default-selection.go

* Ejercicio: Árboles Binarios Equivalentes

Puede haber muchos árboles binarios diferentes que almacenen la misma secuencia de valores. Por ejemplo, aquí puedes ver dos árboles binarios que almancenan la secuencia 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

En la mayoría de lenguajes, escribir una función para comprobar si dos árboles binarios albergan la misma secuencia suele ser bastante compleja. Usando la concurrencia de Go y los canales, podremos escribir una solución simple.

Este ejemplo usa el paquete `tree`, que define el tipo:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


La descripción continúa en la [[javascript:click('.next-page')][siguente página]].

* Ejercicio: Árboles Binarios Equivalentes (cont.)

*1.* Implementa la función `Recorrer`.

*2.* Comprueba que funciona `Recorrer`.

La función `tree.New(k)` construye un arbol binario estructurado de manera aleatoria (pero siempre ordenada), con los valores `k`, `2k`, `3k`, ..., `10k`.

Crea un canal nuevo `ch` y lanza la función de recorrido:

	go Recorrer(tree.New(1), ch)

Luego lee e imprime 10 valores del canal. Deberían ser los números 1, 2, 3, ..., 10.

*3.* Implementa la función `Igual` usando `Recorrer` para determinar si `t1` y `t2` albergan los mismos valores.

*4.* Comprueba la función `Igual`.

`Igual(tree.New(1),`tree.New(1))` debería devolver verdadero, y `Igual(tree.New(1),`tree.New(2))` debería devolver falso.

La documentación de `Tree` se puede encontrar [[https://godoc.org/golang.org/x/tour/tree#Tree][aquí (en inglés)]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Hemos visto cómo los canales son geniales para comunicarse entre gorrutinas.

¿Pero qué ocurre si no necesitamos comunicación? ¿Y si sólo queremos asegurarnos que sólamente
una gorrutina a la vez puede acceder a una variable para evitar conflictos?

Este concepto se conoce como _exclusión_mutua_, y _mutex_ es el nombre que se le da a la estructura de datos que lo proporciona.

La bibloteca estándar de Go dispone de exclusión mutua con [[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] y sus dos métodos:

- `Lock`
- `Unlock`

Podemos definir que un bloque de código se ejecute con exclusión mutua rodeándolo de las llamadas a 
`Lock` y `Unlock` como se puede ver en el método `Inc`.

También podemos utilizar `defer` para asegurarnos que el mutex se desbloqueará, como en el método `Value`.

.play concurrency/mutex-counter.go

* Ejercicio: Rastreador Web

En este ejercicio utilizarás las características de concurrencia de Go para ejecutar un rastreador web en paralelo.

Modifica la función `Crawl` para obtener URLs en paralelo sin obtener la misma URL dos veces.

_Pista_: puedes mantener una caché de las URLs que has ido obteniendo en un mapa, ¡pero los mapas por sí mismos no son seguros para el uso concurrente!

.play concurrency/exercise-web-crawler.go

* A dónde ir desde aquí...

#appengine: You can get started by
#appengine: [[https://golang.org/dl/][installing Go]].

#appengine: Once you have Go installed, the
La
[[https://golang.org/doc/][documentación oficial de Go (en inglés)]] es un gran lugar para
#appengine: continue.
empezar.
Contiene referencias, tutoriales, vídeos y más.

Para aprender cómo organizar el código en Go y cómo trabajar con este, lee [[https://golang.org/doc/code][How to Write Go Code]] (en inglés).

Si necesitas ayuda con la biblioteca estándar, puedes ver la [[https://golang.org/pkg/][referencia de paquetes (en inglés)]]. Para la ayuda sobre el propio lenguaje, puede que te sorprenda que la [[https://golang.org/ref/spec][Especificación del Lenguaje]] (en inglés) es bastante comprensible.

Para explorar a fondo el modelo de concurrencia de Go, puedes ver el vídeo
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]] (en inglés)
([[https://talks.golang.org/2012/concurrency.slide][diapositivas]])
y
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]] (en inglés)
([[https://talks.golang.org/2013/advconc.slide][diapositivas]])
y leer el paseo con código
[[https://golang.org/doc/codewalk/sharemem/][Share Memory by Communicating]]
(en inglés).

Para empezar a escribir aplicaciones web, puedes ver
[[https://vimeo.com/53221558][A simple programming environment]] (en inglés)
([[https://talks.golang.org/2012/simple.slide][diapositivas]])
y leer el tutorial
[[https://golang.org/doc/articles/wiki/][Writing Web Applications]] (en inglés).

El paseo con código [[https://golang.org/doc/codewalk/functions/][First Class Functions in Go]] (en inglés) proporciona una perspectiva intersante sobre los tipos de función en Go.

El [[https://blog.golang.org/][Blog de Go]] tiene un extenso archivo de artículos informativos de Go (en inglés).

Visita [[https://golang.org][golang.org]] para saber más.

