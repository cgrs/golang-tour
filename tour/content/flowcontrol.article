Estructuras de control de la ejecución: for, if, else, switch y defer
Aprende a controlar la ejecución de tu código con condiciones, bucles, bloques switch e instrucciones en diferido.

The Go Authors
https://golang.org

Traducido y ampliado por Carlos González <carlos.gonzalez@kairosds.com>

* For

Go tiene solo una construcción para describr bucles, el bucle `for`.

El bucle `for` básico tiene tres componentes separados por punto y coma:

- la instrucción de inicio: ejecutada antes de la primera iteración
- la expresión de condición: evaluada antes de cada iteración
- la instrucción posterior: ejecutada al final de cada iteración

La instrucción de inicio a menudo será una declaración de variables, y dichas variables declaradas sólo serán visibles en el ámbito de la instrucción `for`.

El bucle interrumpirá la iteración cuando la condición booleana sea falsa.

*Nota:* Al contrario de otros lenguajes como C, Java, o JavaScript, no es necesario escribir entre paréntesis los tres componentes de la expresión `for`, aunque las llaves `{`}` siempre son necesarias.

.play flowcontrol/for.go

* For (cont.)

Las instrucciones de inicio y posterior son opcionales.

.play flowcontrol/for-continued.go

* For es el "while" de Go

En ese punto se pueden omitir los puntos y coma: el `while` de C se llama `for` en Go.

.play flowcontrol/for-is-gos-while.go

* Para siempre

Si omites la condción del bucle, éste se repetirá de forma indefinida, y así un bucle infinito se puede expresar de manera compacta.

.play flowcontrol/forever.go

* If

Las expresiones `if` en Go son como los bucles `for`; no necesitan escribirse entre paréntesis `(`)` pero las llaves `{`}` son obligatorias.

.play flowcontrol/if.go

* If con una instrucción abreviada

Al igual que `for`, la instrucción `if` puede comenzar con una instrucción abreviada para ejecutarse antes de la condición.

Las variables declaradas en esa instrucción sólo están dentro del ámbito del bloque `if` hasta el final de la expresión.

(Prueba a usar `v` en la última instrucción `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If y else

Las variables declaradas dentro de la instrucción `if` abreviada también están disponibles dentro de cualquiera de los bloques `else`.

(Ambas llamadas a la función `potencia` devuelven sus resultados antes de que empiece la llamada a `fmt.Println`
en la función `main`.)

.play flowcontrol/if-and-else.go

* Ejercicio: Bucles y funciones

Como forma de experimentar con las funciones y los bucles, vamos a implementar una función de raíz cuadrada: dado un número x, queremos encontrar el número z tal que z² se aproxime a x.

Las computadoras calculan normalmente la raíz cuadrada de x utilizando un bucle.
Empezando con una aproximación z, podemos ir ajustando z en función a lo cerca que está z² de x,
produciendo una mejor aproximación:

	z -= (z*z - x) / (2*z)

Repitiendo este ajuste hacemos que la aproximación vaya mejorando hasta que lleguemos a un resultado lo más cercano a la raíz cuadrada exacta.

Implementa esto en la función `func`Raíz` proporcionada.
Una aproximación inicial decente para z es 1, independientemente de la entrada.
Para empezar, repite el cálculo unas 10 veces e imprime el valor de z mientras tanto.
Fíjate cómo te vas acercando a la solución para varios valores de x (1, 2, 3, ...)
y cómo va mejorando la aproximación rápidaente.

Pista: Para declarar e inicializar un valor de coma flotante, puedes usar la sintaxis de coma flotante o utilizar una conversión de tipo:

	z := 1.0
	z := float64(1)

Después, cambia la condición del bucle para detenerse una vez que el valor ha dejado de cambiar (o cambia muy poco).
Comprueba si eso ocurre con más de 10 iteraciones o menos.
Prueba otras aproximaciones iniciales para z, como x o x/2.
¿Cuánto se acercan los resultados de tu función a los de la función de la librería estándar [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

(*Nota:* Si te interesan los detalles del algoritmo, el z² − x de arriba es cuánto se aleja z² del valor buscado (x) y la división por 2z es la derivada de z², para ajustar la escala de z según la variación de z².
Este enfoque general se conoce como el [[https://es.wikipedia.org/wiki/M%C3%A9todo_de_Newton][método de Newton]].
Funciona bien para muchos tipos de funciones matemáticas, pero especialmente bien para la raíz cuadrada.)

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Una instrucción `switch` es una manera más corta de escribr una secuencia de expresiones `if`-`else`.
Ejecuta el primer caso cuyo valor es igual a la expresión condicional.

El switch en Go es como el de C, C++, Java, JavaScript, y PHP,
excepto que Go sólo ejecuta el caso seleccionado, no todos los casos siguientes.
Por ello, la instrucción `break` que se necesita al final de cada caso en esos otros lenguajes Go lo proporciona automáticamente.
Otra diferencia importante es que en el switch de Go los casos no tienen por qué ser constantes, al igual que tampoco hace falta que los valores implicados sean enteros.

.play flowcontrol/switch.go

* Orden de evaluación en el switch

Los casos del switch se evalúan de arriba abajo, deteniéndose cuando un caso sea verdadero.

(Por ejemplo,

	switch i {
	case 0:
	case f():
	}

no llama a `f` si `i==0`.)

#appengine: *Note:* Time in the Go playground always appears to start at
#appengine: 2009-11-10 23:00:00 UTC, a value whose significance is left as an
#appengine: exercise for the reader.

.play flowcontrol/switch-evaluation-order.go

* Switch sin condición

Un switch sin condición es equivalente a escribir `switch`true`.

Esta construcción puede considerarse una manera elegante de escibir cadenas largas de if/else.

.play flowcontrol/switch-with-no-condition.go

* Defer

Una instrucción defer pospone la ejecución de una función hasta que la función que la envuelve devuelve su valor.

Los argumentos de las llamadas en diferido se evalúan de inmediato, pero la llamada a la función no se ejecuta hasta que la función en la que se encuentra dentro devuelva su valor.

.play flowcontrol/defer.go

* Apilando "defers"

Las llamadas diferidas a las funciones se van apilando; cuando una función devuelve su valor, sus llamadas en diferido se ejecutan desapilándolas (en orden LIFO, last-in-first-out).

Para saber más sobre las instrucciones defer, puedes leer esta
[[https://blog.golang.org/defer-panic-and-recover][entrada en el blog de Go]] (en inglés).

.play flowcontrol/defer-multi.go

* ¡Enhorabuena!

¡Terminaste esta lección!

Si quieres, puedes volver a la lista de [[/list][módulos]] para ver qué es lo próximo que quieres aprender, o continuar con la [[javascript:click('.next-page')][siguiente lección]].
