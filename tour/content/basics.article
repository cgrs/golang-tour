Paquetes, variables, y funciones.
Aprende los componentes básicos de cualquier programa en Go.

The Go Authors
https://golang.org

Traducido y ampliado por Carlos González <carlos.gonzalez@kairosds.com>

* Paquetes

Cada programa en Go program está compuesto por paquetes.

Los programas se ejecutan en el paquete llamado `main`.

Este programa además está utilizando los paquetes cuya ruta de importación es `"fmt"` y `"math/rand"`.

Por convención, el nombre del paquete es el mismo que el último elemento en la ruta de importación. Por ejemplo, el paquete `"math/rand"` comprende los ficheros que compienzan con la expresión `package`rand`.

#appengine: *Note:* The environment in which these programs are executed is
#appengine: deterministic, so each time you run the example program
#appengine: `rand.Intn` will return the same number.
#appengine:
#appengine: (To see a different number, seed the number generator; see [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: Time is constant in the playground, so you will need to use something else as the seed.)

.play basics/paquetes.go

* Importaciones

En este código, los paquetes a importar se agrupan con paréntesis, como si se tratase de una expresión "factorizada".

También puedes escribir varias expresiones de importación, como:

	import "fmt"
	import "math"

Pero es una buena práctica utilizar la expresión "factorizada".

.play basics/imports.go

* Entidades exportadas

En Go, para exportar una entidad, ésta tiene que empezar por una letra mayúscula.
Por ejemplo, `Pizza` es una entidad exportada, así como `Pi`, que se exporta desde el paquete `math`.

`pizza` y `pi`, al no comenzar con mayúscula, no se exportan.

Cuando importas un paquete, solamente puedes hacer referencia a sus entidades exportadas.
Cualquier entidad "sin exportar" no es accesible desde fuera del paquete.

Ejecuta el código y date cuenta del mensaje de error.

Para arreglarlo, renombra `math.pi` a `math.Pi` y vuelve a intentarlo.

.play basics/exported-names.go

* Funciones

Una función puede tomar cero o más argumentos.

En este caso, `suma` tiene dos parámetros de tipo `int`.

Observa que el tipo se coloca _después_ del nombre de la variable.

(Si te estás preguntando por qué los tipos tienen este aspecto, lee este [[https://blog.golang.org/gos-declaration-syntax][artículo (en inglés) sobre la sintaxis de declaración de Go]].)

.play basics/functions.go

* Funciones (cont.)

Cuando dos o más parámetros con nombre consecutivos de una función comparten tipo, puedes omitir el tipo de todos excepto del último.

En este ejemplo, se acorta

	x int, y int

a

	x, y int

.play basics/functions-continued.go

* Múltiples resultados

Una función puede devolver una cantidad arbitraria de resultados.

La función `intercambiar` devuelve dos cadenas.

.play basics/multiple-results.go

* Valores de retorno con nombre

Los valores de retorno en Go pueden tener nombre. Si esto es así, son tratados como variables definidas al inicio de la función.

Es recomendable usar estos nombres para documentar el significado de los valores de retorno.

Una instrucción `return` sin argumentos devuelve los valores de los argumentos con nombre. Esto se conoce como un retorno "desnudo".

Las expresiones de retorno desnudas sólo deberían utilizarse en funciones cortas, como la que se muestra en el ejemplo, ya que pueden perjudicar la legibilidad en funciones más extensas.

.play basics/named-results.go

* Variables

La expresión `var` declara una lista de variables; al igual que en la lista de argumentos de una función, el tipo se escribe en último lugar.

Una instrucción `var` puede estar al nivel del paquete o de la función, como se puede ver en este ejemplo.

.play basics/variables.go

* Variables inicializadas

La declaración de una variable con `var` puede incluir su inicialización, una por cada variable.

Si la inicialización está presente, se puede omitir el tipo; la variable tomará el tipo de su inicialización.

.play basics/variables-with-initializers.go

* Declaración corta de variables

Dentro de una a función, la instrucción de asignación `:=` se puede usar en lugar de una declaración de una variable con `var` con un tipo implícito.

Fuera de una función, cada instrucción comienza por una palabra clave (`var`, `func`, etc.) por lo que el uso de `:=` no está disponible.

.play basics/short-variable-declarations.go

* Tipos básicos

Los tipos básicos en Go son los siguientes:

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias de uint8

	rune // alias de int32
	     // representa un carácter Unicode

	float32 float64

	complex64 complex128

El ejemplo muestra variables de varios tipos y también que las declaraciones de las variables pueden "factorizarse", al igual que las instrucciones de importación.

Los tipos `int`, `uint`, y `uintptr` son normalmente de 32 bits en sistemas de 32-bit y de 64 bits en sistemas de 64-bit.
Cuando necesites un valor entero, es recomendable que utilices `int` a menos que tengas una razón concreta para utilizar un tipo de entero con un cierto tamaño o sin signo.

.play basics/basic-types.go

* Valores cero

Las variables declaradas sin un valor inicial explícito toman su respectivo _valor_cero_.

El valor cero es:

- `0` para los tipos numéricos,
- `false` para el tipo booleano, y
- `""` (una cadena vacía) para las cadenas.

.play basics/zero.go

* Conversiones de tipo

La expresión `T(v)` convierte el valor `v` al tipo `T`.

Algunas conversiones numéricas:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

O, de manera más sencilla:

	i := 42
	f := float64(i)
	u := uint(f)

Al contrario de C, en Go las asignaciones entre ítems de tipo diferente requieren una conversión explícita.
Intenta quitar las conversiones a `float64` o `uint` en el ejemplo y observa qué ocurre.

.play basics/type-conversions.go

* Inferencia de tipo

Cuando se declara una variable sin especificar explícitamente su tipo (ya sea usando la sintaxis `:=` o `var`=`), el tipo de la variable se infiere por el valor del lado derecho.

Cuando se escribe la declaración de ese lado derecho, la nueva variable tendrá el mismo tipo:

	var i int
	j := i // j es de tipo int

Pero cuando el lado derecho contiene una constante numérica sin tipo, esa variable nueva podrá ser un `int`, `float64`, o `complex128` dependiendo de la precisión de la constante:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Prueba a cambiar el valor inicial de `v` en el código de ejemplo y observa cómo le afecta a su tipo.

.play basics/type-inference.go

* Constantes

Las constantes se declaran como las variables, pero con la palabra clave `const`.

Las constantes pueden ser de tipo carácter, cadena, booleano o numérico.

Las constantes no se pueden declarar usando la sintaxis `:=`.

.play basics/constants.go

* Constantes numéricas

Las constantes numéricas son valores de alta precisión.

Una constante sin tipo toma el que necesita a través de su contexto.

Intenta imprimir también `necesitaInt(Enorme)`.

(Una variable de tipo `int` puede almacenar como mucho un entero de 64-bit, a veces menos.)

.play basics/numeric-constants.go

* ¡Enhorabuena!

¡Has terminado esta lección!

Puedes volver a la lista de [[/list][módulos]] para ver qué es lo próximo que quieres aprender, o continuar con la [[javascript:click('.next-page')][siguiente lección]].
